import 'package:get/get.dart';
import 'package:web3dart/web3dart.dart';
import '../services/wc_service.dart';
import '../services/eth_service.dart';
import '../services/network_service.dart';
import 'package:flutter/material.dart';
import 'dart:async';
import 'package:firebase_auth/firebase_auth.dart';

class WoonklyWalletController extends GetxController {
  final wc = WCService();
  final woonkly = WoonklyService();

  final Rx<String?> account = Rx<String?>(null);
  final isSending = false.obs;
  final woonlyBalance = 0.0.obs;
  final bnbBalance = 0.0.obs;
  final isLoadingBalance = false.obs;

  Timer? _sessionMaintenanceTimer;
  Timer? _balanceUpdateTimer;

  @override
  void onInit() {
    super.onInit();
    initializeService().then((_) {
      print('‚úÖ WoonklyWalletController inicializado');
    }).catchError((error) {
      print('‚ùå Error en WoonklyWalletController.onInit(): $error');
      _retryInitialization();
    });
  }

  Future<void> initializeService() async {
    try {
      print('üöÄ Inicializando WoonklyWalletController...');
      
      // Inicializar servicios necesarios
      await _initializeRequiredServices();
      
      // Configurar wallet para usuario nuevo si es necesario
      await _setupNewUserWalletIfNeeded();
      
      print('‚úÖ WoonklyWalletController inicializado correctamente');
    } catch (e) {
      print('‚ùå Error en WoonklyWalletController.initializeService(): $e');
      throw Exception('Error inicializando WoonklyWalletController: $e');
    }
  }

  Future<void> _initializeRequiredServices() async {
    try {
      // Aqu√≠ inicializamos los servicios necesarios
      // Por ejemplo: conexi√≥n con la blockchain, servicios de wallet, etc.
      await Future.delayed(const Duration(milliseconds: 500));
    } catch (e) {
      print('‚ùå Error inicializando servicios requeridos: $e');
      rethrow;
    }
  }

  Future<void> _setupNewUserWalletIfNeeded() async {
    try {
      // Verificar si es un usuario nuevo y configurar su wallet
      final user = FirebaseAuth.instance.currentUser;
      if (user != null) {
        // Aqu√≠ configuramos la wallet para el nuevo usuario
        await Future.delayed(const Duration(milliseconds: 500));
      }
    } catch (e) {
      print('‚ùå Error configurando wallet para usuario nuevo: $e');
      rethrow;
    }
  }

  Future<void> _retryInitialization() async {
    try {
      print('üîÑ Reintentando inicializaci√≥n de WoonklyWalletController...');
      await Future.delayed(const Duration(seconds: 1));
      await initializeService();
      print('‚úÖ Reinicializaci√≥n de WoonklyWalletController exitosa');
    } catch (e) {
      print('‚ùå Error en reinicializaci√≥n de WoonklyWalletController: $e');
    }
  }

  /// Verifica si ya hay una conexi√≥n activa al inicializar
  Future<void> _checkExistingConnection() async {
    try {
      print('üîç Verificando conexi√≥n existente...');

      // Forzar refresco de la conexi√≥n para verificar sesiones activas
      await wc.refreshConnection();

      if (wc.isConnected && wc.connectedAddress != null) {
        account.value = wc.connectedAddress;
        print('‚úÖ Wallet ya conectada (restaurada): ${account.value}');

        // Obtener balance autom√°ticamente
        await getWoonklyBalance();

        // Notificar al usuario que la sesi√≥n fue restaurada
        Get.snackbar(
          'Wallet Conectada',
          'Tu wallet se restaur√≥ autom√°ticamente',
          snackPosition: SnackPosition.BOTTOM,
          backgroundColor: const Color(0xFF25E198),
          colorText: Colors.white,
          duration: const Duration(seconds: 3),
        );
      } else {
        print('‚ùå No hay wallet conectada');
      }
    } catch (e) {
      print('‚ùå Error verificando conexi√≥n existente: $e');
    }
  }

  /// Inicia el mantenimiento peri√≥dico de la sesi√≥n
  void _startSessionMaintenance() {
    // Cancelar timer existente si hay uno
    _sessionMaintenanceTimer?.cancel();

    // Verificar sesi√≥n cada 30 segundos
    _sessionMaintenanceTimer = Timer.periodic(const Duration(seconds: 30), (
      timer,
    ) async {
      try {
        await wc.maintainSession();

        // Verificar si la conexi√≥n se perdi√≥
        if (account.value != null &&
            (!wc.isConnected || wc.connectedAddress == null)) {
          print('‚ö†Ô∏è Conexi√≥n perdida detectada');
          account.value = null;
          woonlyBalance.value = 0.0;
          bnbBalance.value = 0.0;
          _stopBalanceUpdates();

          Get.snackbar(
            'Conexi√≥n Perdida',
            'Tu wallet se desconect√≥. Reconecta cuando sea necesario.',
            snackPosition: SnackPosition.BOTTOM,
            backgroundColor: Colors.orange,
            colorText: Colors.white,
            duration: const Duration(seconds: 3),
          );
        }
      } catch (e) {
        print('‚ùå Error en mantenimiento de sesi√≥n: $e');
      }
    });
  }

  /// Inicia actualizaciones peri√≥dicas del balance
  void _startBalanceUpdates() {
    _stopBalanceUpdates(); // Asegurar que no hay timers duplicados

    // Actualizar balance cada 2 minutos
    _balanceUpdateTimer = Timer.periodic(const Duration(minutes: 2), (
      timer,
    ) async {
      if (isConnected) {
        try {
          print('üîÑ Actualizaci√≥n autom√°tica de balance...');
          await getWoonklyBalance();
        } catch (e) {
          print('‚ùå Error en actualizaci√≥n autom√°tica de balance: $e');
        }
      } else {
        _stopBalanceUpdates();
      }
    });
  }

  /// Detiene las actualizaciones autom√°ticas del balance
  void _stopBalanceUpdates() {
    _balanceUpdateTimer?.cancel();
    _balanceUpdateTimer = null;
  }

  /// Fuerza la recarga de la conexi√≥n y balance
  Future<void> forceRefresh() async {
    try {
      print('üîÑ Verificando conectividad antes de recargar...');
      isLoadingBalance.value = true;

      // Verificar conectividad de red primero
      final networkService = Get.find<NetworkService>();
      await networkService.checkConnectivity();

      if (!networkService.isConnected) {
        print('üìµ Sin conectividad de red, cancelando recarga');
        Get.snackbar(
          'Sin Conexi√≥n',
          'Verifica tu conexi√≥n a internet antes de recargar',
          snackPosition: SnackPosition.BOTTOM,
          backgroundColor: Colors.orange,
          colorText: Colors.white,
          duration: const Duration(seconds: 3),
        );
        return;
      }

      print('üîÑ Recargando datos con conectividad confirmada...');

      // Reinicializar servicio WC con menos frecuencia
      await wc.refreshConnection();

      if (wc.isConnected && wc.connectedAddress != null) {
        account.value = wc.connectedAddress;
        await getWoonklyBalance();

        // Reiniciar actualizaciones si no estaban activas
        if (_balanceUpdateTimer == null) {
          _startBalanceUpdates();
        }
      } else {
        print('‚ùå No hay wallet conectada despu√©s del refresh');
        account.value = null;
        woonlyBalance.value = 0.0;
        bnbBalance.value = 0.0;
        _stopBalanceUpdates();
      }
    } catch (e) {
      print('‚ùå Error en force refresh: $e');
      Get.snackbar(
        'Error',
        'No se pudo actualizar los datos. Intenta nuevamente.',
        snackPosition: SnackPosition.BOTTOM,
        backgroundColor: Colors.orange,
        colorText: Colors.white,
        duration: const Duration(seconds: 3),
      );
    } finally {
      isLoadingBalance.value = false;
    }
  }

  Future<void> connectWallet() async {
    try {
      print('üîó Conectando wallet...');
      await wc.init();
      final session = await wc.connect();

      // Extraer la direcci√≥n de la cuenta desde los namespaces
      final accounts = session.namespaces['eip155']?.accounts;
      if (accounts != null && accounts.isNotEmpty) {
        // El formato es "eip155:56:0x..." para BSC (chain ID 56)
        account.value = accounts.first.split(':').last;
        print('‚úÖ Wallet conectada: ${account.value}');

        // Mostrar que est√° detectando tokens
        Get.snackbar(
          'Wallet Conectada',
          'Detectando tokens Woonkly (WOOP) en BSC...',
          snackPosition: SnackPosition.BOTTOM,
          backgroundColor: const Color(0xFF25E198),
          colorText: Colors.white,
          duration: const Duration(seconds: 2),
        );

        // Obtener balance inmediatamente
        await getWoonklyBalance();

        // Mostrar resultado de la detecci√≥n
        if (woonlyBalance.value > 0) {
          Get.snackbar(
            'Tokens Detectados',
            '‚úÖ Se encontraron ${woonlyBalance.value.toStringAsFixed(6)} tokens WOOP',
            snackPosition: SnackPosition.BOTTOM,
            backgroundColor: const Color(0xFF25E198),
            colorText: Colors.white,
            duration: const Duration(seconds: 3),
          );
        } else {
          Get.snackbar(
            'Sin Tokens WOOP',
            'No se encontraron tokens WOOP en esta wallet. Puedes recibir tokens usando la direcci√≥n mostrada.',
            snackPosition: SnackPosition.BOTTOM,
            backgroundColor: Colors.orange,
            colorText: Colors.white,
            duration: const Duration(seconds: 4),
          );
        }

        // Iniciar actualizaciones autom√°ticas
        _startBalanceUpdates();
      }
    } catch (e) {
      print('‚ùå Error connecting wallet: $e');
      rethrow;
    }
  }

  Future<String?> sendWoonkly({
    required String to,
    required double amount, // en WOOP
  }) async {
    if (account.value == null) return null;

    try {
      // üîç Validaci√≥n 1: Direcci√≥n destino con regex
      final addressRegex = RegExp(r'^0x[a-fA-F0-9]{40}$');
      if (!addressRegex.hasMatch(to)) {
        throw Exception('Direcci√≥n destino inv√°lida');
      }

      // üîç Validaci√≥n 2: Cantidad > 0 y <= saldo
      if (amount <= 0) {
        throw Exception('La cantidad debe ser mayor a 0');
      }

      if (amount > woonlyBalance.value) {
        throw Exception(
          'Balance insuficiente. Tienes ${woonlyBalance.value.toStringAsFixed(6)} WOOP',
        );
      }

      // üîç Validaci√≥n 3: Verificar que hay suficiente BNB para gas
      final bnbBalanceEth = await woonkly.getBnbBalance(account.value!);
      final bnbBalanceValue = bnbBalanceEth.getValueInUnit(EtherUnit.ether);

      if (bnbBalanceValue < 0.001) {
        // M√≠nimo 0.001 BNB para gas
        throw Exception(
          'Balance BNB insuficiente para gas. Necesitas al menos 0.001 BNB',
        );
      }

      final tx = woonkly.buildWoonklyTransferTransaction(
        from: account.value!,
        to: to,
        amount: amount,
      );

      isSending.value = true;

      // Intentar enviar transacci√≥n con manejo de sesi√≥n expirada
      final hash = await _sendTransactionWithRetry(tx);

      // Actualizar balance despu√©s de enviar
      await getWoonklyBalance();

      return hash;
    } catch (e) {
      print('‚ùå Error sending Woonkly: $e');
      rethrow;
    } finally {
      isSending.value = false;
    }
  }

  /// Env√≠a transacci√≥n con reintentos autom√°ticos en caso de sesi√≥n expirada
  Future<String> _sendTransactionWithRetry(Map<String, String> tx) async {
    try {
      // Primer intento
      return await wc.sendTx(tx);
    } catch (e) {
      print('‚ùå Error en primer intento de transacci√≥n: $e');

      // Verificar si es error de sesi√≥n expirada
      if (_isSessionExpiredError(e)) {
        print('üîÑ Sesi√≥n expirada detectada, intentando reconectar...');

        // Mostrar notificaci√≥n al usuario
        Get.snackbar(
          'Reconectando Wallet',
          'La sesi√≥n expir√≥, reconectando autom√°ticamente...',
          snackPosition: SnackPosition.BOTTOM,
          backgroundColor: Colors.orange,
          colorText: Colors.white,
          duration: const Duration(seconds: 3),
        );

        try {
          // Intentar reconectar
          await _reconnectWallet();

          // Segundo intento despu√©s de reconectar
          print('üîÑ Reintentando transacci√≥n despu√©s de reconectar...');
          return await wc.sendTx(tx);
        } catch (reconnectError) {
          print('‚ùå Error en reconexi√≥n: $reconnectError');
          throw Exception(
            'La sesi√≥n de tu wallet expir√≥. Por favor reconecta tu wallet manualmente desde el dashboard.',
          );
        }
      } else {
        // Si no es error de sesi√≥n, relanzar el error original
        rethrow;
      }
    }
  }

  /// Verifica si el error es debido a sesi√≥n expirada
  bool _isSessionExpiredError(dynamic error) {
    final errorString = error.toString().toLowerCase();
    return errorString.contains('session topic doesn\'t exist') ||
        errorString.contains('no matching key') ||
        errorString.contains('walletconnecterror(code: 2') ||
        errorString.contains('session expired') ||
        errorString.contains('invalid session');
  }

  /// Intenta reconectar la wallet autom√°ticamente
  Future<void> _reconnectWallet() async {
    try {
      print('üîÑ Iniciando reconexi√≥n autom√°tica...');

      // Limpiar estado actual
      account.value = null;
      woonlyBalance.value = 0.0;
      bnbBalance.value = 0.0;

      // Reinicializar servicios
      await wc.init();
      await wc.refreshConnection();

      // Verificar si hay sesi√≥n activa despu√©s del refresh
      if (wc.isConnected && wc.connectedAddress != null) {
        account.value = wc.connectedAddress;
        print('‚úÖ Reconexi√≥n autom√°tica exitosa: ${account.value}');

        // Obtener balance actualizado
        await getWoonklyBalance();

        Get.snackbar(
          'Wallet Reconectada',
          'Tu wallet se ha reconectado exitosamente',
          snackPosition: SnackPosition.BOTTOM,
          backgroundColor: const Color(0xFF25E198),
          colorText: Colors.white,
          duration: const Duration(seconds: 2),
        );
      } else {
        throw Exception('No se pudo restablecer la conexi√≥n autom√°ticamente');
      }
    } catch (e) {
      print('‚ùå Fallo en reconexi√≥n autom√°tica: $e');
      rethrow;
    }
  }

  /// Verifica el estado de la conexi√≥n antes de operaciones importantes
  Future<bool> _ensureConnection() async {
    if (!isConnected) {
      return false;
    }

    try {
      // Verificar que la sesi√≥n a√∫n sea v√°lida
      await wc.refreshConnection();

      if (!wc.isConnected || wc.connectedAddress == null) {
        print('‚ö†Ô∏è Conexi√≥n perdida, limpiando estado...');
        account.value = null;
        woonlyBalance.value = 0.0;
        bnbBalance.value = 0.0;
        return false;
      }

      return true;
    } catch (e) {
      print('‚ùå Error verificando conexi√≥n: $e');
      return false;
    }
  }

  /// Obtiene el balance de Woonkly tokens del usuario conectado
  Future<void> getWoonklyBalance() async {
    if (account.value == null) {
      print('‚ùå No hay cuenta conectada, no se puede obtener balance');
      return;
    }

    try {
      print('üí∞ Obteniendo balance para: ${account.value}');
      isLoadingBalance.value = true;

      // Intento inicial
      await _attemptGetBalance();
    } catch (e) {
      print('‚ùå Error getting Woonkly balance: $e');

      // Si el primer intento falla, intentar despu√©s de 2 segundos
      print('üîÑ Reintentando obtener balance en 2 segundos...');
      await Future.delayed(const Duration(seconds: 2));

      try {
        await _attemptGetBalance();
      } catch (e2) {
        print('‚ùå Segundo intento fall√≥: $e2');

        // Tercer intento despu√©s de 5 segundos m√°s
        print('üîÑ √öltimo intento en 5 segundos...');
        await Future.delayed(const Duration(seconds: 5));

        try {
          await _attemptGetBalance();
        } catch (e3) {
          print('‚ùå Todos los intentos fallaron: $e3');
          woonlyBalance.value = 0.0;
          bnbBalance.value = 0.0;

          // Mostrar error al usuario pero no lanzar excepci√≥n
          Get.snackbar(
            'Error de Conexi√≥n',
            'No se pudo obtener el balance de Woonkly. Verifica tu conexi√≥n a internet.',
            snackPosition: SnackPosition.BOTTOM,
            backgroundColor: Colors.red,
            colorText: Colors.white,
            duration: const Duration(seconds: 4),
          );
        }
      }
    } finally {
      isLoadingBalance.value = false;
    }
  }

  /// Intenta obtener el balance una vez
  Future<void> _attemptGetBalance() async {
    // Obtener balance de Woonkly tokens
    final newWoonklyBalance = await woonkly.getWoonklyBalance(account.value!);
    woonlyBalance.value = newWoonklyBalance;
    print('‚úÖ Woonkly Balance actualizado: ${woonlyBalance.value} WOOP');

    // Obtener balance de BNB para gas fees
    final bnbBalanceWei = await woonkly.getBnbBalance(account.value!);
    final newBnbBalance = bnbBalanceWei.getValueInUnit(EtherUnit.ether);
    bnbBalance.value = newBnbBalance;
    print('‚úÖ BNB Balance actualizado: ${bnbBalance.value} BNB');

    // Trigger UI update
    update();
  }

  /// Valida que la cantidad sea v√°lida y no exceda el balance
  String? validateAmount(String amountStr) {
    if (amountStr.trim().isEmpty) {
      return 'Por favor ingrese una cantidad';
    }

    final amount = double.tryParse(amountStr);
    if (amount == null || amount <= 0) {
      return 'Cantidad inv√°lida';
    }

    if (amount > woonlyBalance.value) {
      return 'Cantidad excede el balance disponible (${woonlyBalance.value.toStringAsFixed(6)} WOOP)';
    }

    return null; // Validaci√≥n exitosa
  }

  /// Valida que haya suficiente BNB para gas
  Future<String?> validateGasRequirement(double amount) async {
    if (account.value == null) return null;

    try {
      // Para tokens BEP-20, necesitamos BNB para gas
      if (bnbBalance.value < 0.001) {
        return 'Balance BNB insuficiente para gas. Necesitas al menos 0.001 BNB para las transacciones.';
      }

      return null; // Suficiente BNB para la transacci√≥n
    } catch (e) {
      print('‚ùå Error validating gas requirement: $e');
      return 'Error al verificar requisitos de gas';
    }
  }

  /// Verifica si hay una wallet conectada
  bool get isConnected => account.value != null && wc.isConnected;

  /// Desconecta la wallet
  Future<void> disconnect() async {
    try {
      await wc.disconnect();
      account.value = null;
      woonlyBalance.value = 0.0;
      bnbBalance.value = 0.0;

      // Detener actualizaciones autom√°ticas
      _stopBalanceUpdates();

      Get.snackbar(
        'Wallet Desconectada',
        'Tu wallet se ha desconectado exitosamente',
        snackPosition: SnackPosition.BOTTOM,
        backgroundColor: const Color(0xFF4A63E7),
        colorText: Colors.white,
        duration: const Duration(seconds: 2),
      );
    } catch (e) {
      print('‚ùå Error disconnecting wallet: $e');
    }
  }

  @override
  void onClose() {
    _sessionMaintenanceTimer?.cancel();
    _balanceUpdateTimer?.cancel();
    woonkly.dispose();
    super.onClose();
  }
}
